package com.mohey.memberservice.controller;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;import java.util.UUID;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.http.MediaType;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.ResultActions;import org.springframework.transaction.annotation.Transactional;import com.fasterxml.jackson.databind.ObjectMapper;import com.mohey.memberservice.domain.FriendRelation;import com.mohey.memberservice.domain.Member;import com.mohey.memberservice.dto.memberalram.FriendReqAlarmReqDto;import com.mohey.memberservice.dto.memberjoin.JoinReqDto;import com.mohey.memberservice.repository.FriendRelationRepository;import com.mohey.memberservice.repository.MemberInfoRepository;import com.mohey.memberservice.repository.MemberRepository;@Transactional@AutoConfigureMockMvc@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK)class FriendAlarmControllerTest {	@Autowired	private MockMvc mvc;	@Autowired	private ObjectMapper om;	@Autowired	private MemberRepository memberRepository;	@Autowired	private MemberInfoRepository memberInfoRepository;	@Autowired	private FriendRelationRepository friendRelationRepository;	static final String memberUuid = UUID.randomUUID().toString();	static final String friendUuid = UUID.randomUUID().toString();	@BeforeEach	public void setUp() {		//공통 given		JoinReqDto joinReqDto = new JoinReqDto();		joinReqDto.setBirthDate("1994-12-01");		joinReqDto.setMemberUuid(memberUuid);		joinReqDto.setGender("MAN");		Member member = memberRepository.save(joinReqDto.toMemberEntity());		joinReqDto.setBirthDate("1999-12-01");		joinReqDto.setMemberUuid(friendUuid);		joinReqDto.setGender("WOMAN");		Member member2 = memberRepository.save(joinReqDto.toMemberEntity());		joinReqDto.setBirthDate("1999-12-06");		joinReqDto.setMemberUuid("1234");		joinReqDto.setGender("WOMAN");		Member member3 = memberRepository.save(joinReqDto.toMemberEntity());		FriendRelation friendRelation =			FriendRelation.builder()				.memberId(member)				.friendId(member3)				.favoriteStatus(false)				.friendStatus(true)				.build();		friendRelationRepository.save(friendRelation);		FriendRelation friendRelation2 =			FriendRelation.builder()				.memberId(member2)				.friendId(member3)				.favoriteStatus(false)				.friendStatus(false)				.build();		friendRelationRepository.save(friendRelation2);	}	@Transactional	@Test	public void sendAlarm_success_test() throws Exception {		// given		FriendReqAlarmReqDto friendReqAlarmReqDto = new FriendReqAlarmReqDto();		friendReqAlarmReqDto.setMyUuid(memberUuid);		friendReqAlarmReqDto.setFriendUuid("1234");		String requestBody = om.writeValueAsString(friendReqAlarmReqDto);		System.out.println("테스트 : " + requestBody);		// when		ResultActions resultActions = mvc			.perform(post("/members/friendAlarm/send").content(requestBody).contentType(MediaType.APPLICATION_JSON));		String responseBody =			resultActions.andReturn().getResponse().getContentAsString();		System.out.println("테스트 : " + responseBody);		// then		resultActions.andExpect(status().isCreated());	}	@Transactional	@Test	public void sendAlarm_fail_test() throws Exception {		// given		FriendReqAlarmReqDto friendReqAlarmReqDto = new FriendReqAlarmReqDto();		friendReqAlarmReqDto.setMyUuid(memberUuid);		friendReqAlarmReqDto.setFriendUuid("4242444");		String requestBody = om.writeValueAsString(friendReqAlarmReqDto);		System.out.println("테스트 : " + requestBody);		// when		ResultActions resultActions = mvc			.perform(post("/members/friendAlarm/send").content(requestBody).contentType(MediaType.APPLICATION_JSON));		String responseBody =			resultActions.andReturn().getResponse().getContentAsString();		System.out.println("테스트 : " + responseBody);		// then		resultActions.andExpect(status().isBadRequest());	}}