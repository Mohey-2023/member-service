package com.mohey.memberservice.service;import java.util.ArrayList;import java.util.List;import com.mohey.memberservice.dto.memberInfo.GetYourInfoRespDto;import org.springframework.dao.DataIntegrityViolationException;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import com.mohey.memberservice.domain.Member;import com.mohey.memberservice.domain.MemberInfo;import com.mohey.memberservice.domain.MemberInterest;import com.mohey.memberservice.domain.MemberProfileImage;import com.mohey.memberservice.dto.memberInfo.GetInfoRespDto;import com.mohey.memberservice.dto.memberInfo.GetProfileAndStatusRespDto;import com.mohey.memberservice.dto.memberupdate.UpdateInfoReqDto;import com.mohey.memberservice.dto.memberupdate.UpdateInfoRespDto;import com.mohey.memberservice.ex.CustomApiException;import com.mohey.memberservice.repository.FriendRelationRepository;import com.mohey.memberservice.repository.MemberInfoRepository;import com.mohey.memberservice.repository.MemberInterestRepository;import com.mohey.memberservice.repository.MemberProfileRepository;import com.mohey.memberservice.repository.MemberRepository;import lombok.RequiredArgsConstructor;@RequiredArgsConstructor@Servicepublic class MemberInfoServiceImpl implements MemberInfoService {	private final MemberRepository memberRepository;	private final MemberInfoRepository memberInfoRepository;	private final MemberInterestRepository memberInterestRepository;	private final MemberProfileRepository memberProfileRepository;	private final FriendRelationRepository friendRelationRepository;	@Transactional	@Override	public GetInfoRespDto getInfo(String uuid) {		try {			Member member = memberRepository.findByMemberUuid(uuid);			if (member != null) {				Long memberId = member.getId();				GetInfoRespDto getInfoRespDto = memberInfoRepository.getUserInfo(memberId);				return getInfoRespDto;			} else {				throw new CustomApiException("회원정보가 없습니다.");			}		} catch (DataIntegrityViolationException e) {			throw new CustomApiException("실패");		}	}	@Override	public GetYourInfoRespDto getYourInfo(String memberUuid, String friendUuid) {		try {			Member member = memberRepository.findByMemberUuid(memberUuid);			Member friend = memberRepository.findByMemberUuid(friendUuid);			if (member != null) {				Long memberId = member.getId();				Long friendId = friend.getId();				GetYourInfoRespDto getYourInfoRespDto = memberInfoRepository.getYourInfo(member,friend);				return getYourInfoRespDto;			} else {				throw new CustomApiException("회원정보가 없습니다.");			}		} catch (DataIntegrityViolationException e) {			throw new CustomApiException("실패");		}	}	@Transactional	@Override	public List<String> getInterest(String uuid) {		try {			List<String> interests = new ArrayList<>();			List<MemberInterest> interestList = new ArrayList<>();			Member member = memberRepository.findByMemberUuid(uuid);			if (member != null) {				interestList = memberInterestRepository.findTop3ByMemberIdOrderByCreatedDatetimeDesc(member);				// 조회한 장치의 deviceToken을 deviceToken 리스트에 추가				for (MemberInterest interest : interestList) {					interests.add(interest.getInterest());				}			} else {				throw new CustomApiException("회원정보가 없습니다.");			}			return interests;		} catch (DataIntegrityViolationException e) {			throw new CustomApiException("실패");		}	}	@Transactional	@Override	public UpdateInfoRespDto updateInfo(UpdateInfoReqDto updateInfoReqDto) {		Member member = memberRepository.findByMemberUuid(updateInfoReqDto.getMemberUuid());		MemberInfo memberInfo = memberInfoRepository.findMemberInfoByMemberId(member);		try {			if (updateInfoReqDto.getNickname() != null || updateInfoReqDto.getSelfIntroduction() != null) {				if (updateInfoReqDto.getNickname() == null) {					updateInfoReqDto.setNickname(memberInfo.getNickname());				}				if (updateInfoReqDto.getSelfIntroduction() == null) {					updateInfoReqDto.setSelfIntroduction(memberInfo.getSelfIntroduction());				}				memberInfoRepository.save(updateInfoReqDto.toMemberInfoEntity(member));			}			if (updateInfoReqDto.getProfile_url() != null) {				memberProfileRepository.save(updateInfoReqDto.toMemberProfileEntity(member));			}			if (updateInfoReqDto.getInterests() != null) {				memberInterestRepository.saveAll(updateInfoReqDto.toMemberInterestEntities(member));			}			return new UpdateInfoRespDto(updateInfoReqDto);		} catch (DataIntegrityViolationException e) {			throw new CustomApiException("회원수정 실패");		}	}	@Override	public String getUsername(String uuid) {		Member member = memberRepository.findByMemberUuid(uuid);		MemberInfo memberInfo = memberInfoRepository.findMemberInfoByMemberId(member);		String nickname = memberInfo.getNickname();		return nickname;	}	@Override	public String getProfileImage(String memberUuid) {		Member member = memberRepository.findByMemberUuid(memberUuid);		MemberProfileImage mp = memberProfileRepository.findMemberProfileImageByMemberId(member);		String profileImage = mp.getProfileUrl();		return profileImage;	}	@Override	public GetProfileAndStatusRespDto getProfileAndStatus(String memberUuid) {		Member receiver = memberRepository.findByMemberUuid(memberUuid);		if (receiver != null) {			MemberInfo memberInfo = memberInfoRepository.findMemberInfoByMemberId(receiver);			MemberProfileImage memberProfileImage				= memberProfileRepository.findMemberProfileImageByMemberId(receiver);			GetProfileAndStatusRespDto getProfileAndStatusRespDto = new GetProfileAndStatusRespDto(				memberInfo.getNickname(), receiver.getGender(), receiver.getBirthDate(),				memberProfileImage.getProfileUrl());			return getProfileAndStatusRespDto;		}		throw new CustomApiException("보내기 실패");	}}