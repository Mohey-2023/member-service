package com.mohey.memberservice.service;import com.mohey.memberservice.repository.MemberDeviceAliveStatusRepository;import com.mohey.memberservice.repository.MemberDeviceNotiStatusRepository;import org.springframework.dao.DataIntegrityViolationException;import org.springframework.stereotype.Service;import com.mohey.memberservice.domain.Member;import com.mohey.memberservice.domain.MemberDevice;import com.mohey.memberservice.dto.memberdevice.DeviceRegisterReqDto;import com.mohey.memberservice.dto.memberdevice.DeviceRegisterRespDto;import com.mohey.memberservice.ex.CustomApiException;import com.mohey.memberservice.repository.MemberDeviceRepository;import com.mohey.memberservice.repository.MemberRepository;import lombok.RequiredArgsConstructor;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.List;@RequiredArgsConstructor@Servicepublic class MemberDeviceServiceImpl implements MemberDeviceService {	private final MemberDeviceRepository memberDeviceRepository;	private final MemberDeviceAliveStatusRepository memberDeviceAliveStatusRepository;	private final MemberDeviceNotiStatusRepository memberDeviceNotiStatusRepository;	private final MemberRepository memberRepository;	@Transactional	@Override	public DeviceRegisterRespDto registerDevice(DeviceRegisterReqDto deviceRegisterReqDto) {		try {			Member member = memberRepository.findByMemberUuid(deviceRegisterReqDto.getMemberUuid());			MemberDevice memberDevice = memberDeviceRepository.save(deviceRegisterReqDto.toMemberDeviceEntity(member));			memberDeviceAliveStatusRepository.save(deviceRegisterReqDto.toMemberDeviceAliveStatusEntity(memberDevice));			memberDeviceNotiStatusRepository.save(deviceRegisterReqDto.toMemberDeviceNotiStatusEntity(memberDevice));			System.out.println("테스트트트" + member);			return new DeviceRegisterRespDto(member);		} catch (DataIntegrityViolationException e) {			throw new CustomApiException("기기등록 실패");		}	}	@Transactional	@Override	public List<String> getToken(String uuid) {		try {			List<String > deviceToken = new ArrayList<>();			List<MemberDevice> memList = new ArrayList<>();			Member member = memberRepository.findByMemberUuid(uuid);			if (member != null) {				memList = memberDeviceRepository.findMemberDevicesByMemberId(member);				// 조회한 장치의 deviceToken을 deviceToken 리스트에 추가				for (MemberDevice device : memList) {					deviceToken.add(device.getDeviceToken());				}			}else {				throw new CustomApiException("회원정보가 없습니다.");			}			return deviceToken;		} catch (DataIntegrityViolationException e) {			throw new CustomApiException("실패");		}	}}